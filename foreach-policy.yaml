# Source: kyverno-policies/templates/require-non-root-user.yaml
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-non-root-user
  annotations:
    policies.kyverno.io/title: Reqire Non-root User
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/description: >-
      Following the least privilege principle, containers should not be run as root. This policy ensures containers either have `runAsNonRoot` set to `true` or `runAsUser` > 0.
  labels:
    app.kubernetes.io/name: kyverno-policies
    helm.sh/chart: kyverno-policies-1.0.1-bb.7
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "1.0.1-bb.7"
    app.kubernetes.io/component: policy
    app.kubernetes.io/part-of: kyverno
    app: kyverno
spec:
  webhookTimeoutSeconds: 30
  validationFailureAction: enforce
  rules:
  - name: non-root-user
    exclude:
      any:
      - resources:
          names:
          - kyverno-policies-script-test*
          namespaces:
          - kyverno-policies
    match:
      all:
      - resources:
          kinds:
          - Pod
    preconditions:
      all:
      - key: "{{request.operation}}"
        operator: In
        value:
        - CREATE
        - UPDATE
    validate:
      message: >-
        Either `runAsNonRoot` must be set to true or `runAsUser` must be > 0 in spec.securityContext or (spec.containers[*].securityContext, spec.initContainers[*].securityContext, and spec.ephemeralContainers[*].securityContext)
      foreach:
      - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
        preconditions:
          all:
          - key: "{{ request.object.spec.securityContext.runAsUser }}"
            operator: GreaterThan
            value: 0
          - key: "{{ element.name }}"
            operator: AnyNotIn
            value:
            - not-me
            - or-me
            - istio-init
        anyPattern:
        - (securityContext):
            =(runAsUser): "!0"
            =(runAsNonRoot): "!false"
      - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
        preconditions:
          all:
          - key: "{{ request.object.spec.securityContext.runAsUser }}"
            operator: Equals
            value: ""
          - key: "{{ element.name }}"
            operator: AnyNotIn
            value:
            - not-me
            - or-me
            - istio-init
        anyPattern:
        - (securityContext):
            =(runAsUser): ">0"
        - (securityContext):
            =(runAsNonRoot): true
      - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
        preconditions:
          all:
          - key: "{{ request.object.spec.securityContext.runAsNonRoot }}"
            operator: Equals
            value: true
          - key: "{{ element.name }}"
            operator: AnyNotIn
            value:
            - not-me
            - or-me
            - istio-init
        anyPattern:
        - (securityContext):
            =(runAsNonRoot): true
            =(runAsUser): "!0"
        - (securityContext):
            =(runAsNonRoot): "!false"
            =(runAsUser): ">0"
      - list: request.object.spec.[ephemeralContainers, initContainers, containers][]
        preconditions:
          all:
          - key: "{{ request.object.spec.securityContext.runAsNonRoot }}"
            operator: NotEquals
            value: true
          - key: "{{ request.object.spec.securityContext.runAsUser }}"
            operator: AnyIn
            value: ["", 0]
          - key: "{{ element.name }}"
            operator: AnyNotIn
            value:
            - not-me
            - or-me
            - istio-init
        anyPattern:
        - securityContext:
            runAsNonRoot: true
        - securityContext:
            runAsUser: ">0"
